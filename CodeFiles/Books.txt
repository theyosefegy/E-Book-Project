package ebookstore1;

import ebookstore1.EBookStore1;
import ebookstore1.BlueprintClass;
import static ebookstore1.connection.Close;
import java.awt.Color;
import java.awt.Label;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

public class Book extends BlueprintClass implements ActionListener {
    
    // TextFields
    TextField isbnField = new TextField();
    TextField titleField = new TextField();
    TextField pageCountField = new TextField();
    TextField priceField = new TextField();
    TextField publisherCodeField = new TextField();

    // Labels
    Label isbnLabel = new Label("ISBN:");
    Label titleLabel = new Label("Title:");
    Label pageCountLabel = new Label("Page Count:");
    Label priceLabel = new Label("Price:");
    Label publisherCodeLabel = new Label("Publisher\nID:");
    
    
    // giving the initial values
    Book() {
        super("Publisher","Nav");
        setTitle("Books");
        
        //  TextFields Configuration      
        isbnField.setBounds(140, 100, 200, 30);
        titleField.setBounds(140, 150, 200, 30);
        pageCountField.setBounds(140, 200, 200, 30);
        priceField.setBounds(140, 250, 200, 30);
        publisherCodeField.setBounds(140, 300, 200, 30);

        // Labels Configuration
        isbnLabel.setBounds(30, 100, 80, 30);
        titleLabel.setBounds(30, 150, 80, 30);
        pageCountLabel.setBounds(30, 200, 80, 30);
        priceLabel.setBounds(30, 250, 80, 30);
        publisherCodeLabel.setBounds(30, 300, 80, 40);
        
        isbnLabel.setForeground(Color.WHITE);    
        titleLabel.setForeground(Color.WHITE);    
        pageCountLabel.setForeground(Color.WHITE);    
        priceLabel.setForeground(Color.WHITE);    
        publisherCodeLabel.setForeground(Color.WHITE);
        
        isbnLabel.setFont(myFont);
        titleLabel.setFont(myFont);   
        pageCountLabel.setFont(myFont);  
        priceLabel.setFont(myFont); 
        publisherCodeLabel.setFont(myFont);
        
        // ADD
        add(isbnField);
        add(titleField);
        add(pageCountField);
        add(priceField);
        add(publisherCodeField);

        add(isbnLabel);
        add(titleLabel);
        add(pageCountLabel);
        add(priceLabel);
        add(publisherCodeLabel);
        
        remove(backToNavBtn);

    }
    
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == closeBtn) {
                Close();
                System.exit(0);

        } else if (e.getSource() == nextBtn) {
            setVisible(false);
            dispose(); 
            new Publisher();
            
        } else if (e.getSource() == preBtn) {
            setVisible(false);
            dispose(); 
            new EBookStore1();
            
        }else if (e.getSource() == clearBtn){
            isbnField.setText("");
            titleField.setText("");
            pageCountField.setText("");
            priceField.setText("");
            publisherCodeField.setText("");

        } else if (e.getSource() == insertBtn){
            String isbn = isbnField.getText(); // string
            String title = titleField.getText(); // string
            String pageCount = pageCountField.getText(); // int
            String price = priceField.getText(); // int
            String p_code = publisherCodeField.getText(); // int

            String sqlQuery = "INSERT INTO book (ISPN, title, price, page_count, p_code) VALUES "
                            +"('"+isbn+"','"+title+"',"+price+","+pageCount+","+p_code+")";

            boolean result =  connection.executeQuary(sqlQuery);

            if(result){
                JOptionPane.showMessageDialog(null,"Book Inserted Successfully");
                logText += "Book inserted: ISBN " + isbn + "\n";
            } else {    
                JOptionPane.showMessageDialog(null,"Failed to insert the book. Please try again.");
            }


        } else if (e.getSource() == updateBtn){
            String isbn = isbnField.getText(); // string
            String title = titleField.getText(); // string
            String pageCount = pageCountField.getText(); // int
            String price = priceField.getText(); // int
            String p_code = publisherCodeField.getText(); // int

            String sqlQuery = "UPDATE book SET title='" + title + "', price=" + price + ", page_count=" + pageCount + ", p_code=" + p_code + " WHERE ISPN='" + isbn + "'";

            boolean result =  connection.executeQuary(sqlQuery);

            if(result){
                JOptionPane.showMessageDialog(null,"Book Updated Successfully");
                logText += "Book updated: ISBN " + isbn + "\n";
            } else {
                JOptionPane.showMessageDialog(null,"Failed to update the book. Please try again.");
            }


        } else if (e.getSource() == deleteBtn){
            String isbn = isbnField.getText();

            String sqlQuery = "DELETE FROM books WHERE ISPN='" + isbn + "'";

            boolean result = connection.executeQuary(sqlQuery);

            if (result) {
                JOptionPane.showMessageDialog(null, "Book Deleted Successfully");
                logText += "Book deleted: ISBN " + isbn + "\n";
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete the book. Please try again.");
            }
        }
    }
}
